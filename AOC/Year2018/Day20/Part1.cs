using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace AoC.Year2018.Day20
{
    public class Part1 : BasePart
    {
        private Regex re = new Regex(@"\([^\(]*\)");
        private const int SIZE = 400;
        protected void RunScenario(string title, string input)
        {
            RunScenario(title, () =>
            {
                var line = input.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)[0];
                var root = ParseConcatNode(line.GetEnumerator());

                var grid = new char[SIZE, SIZE];
                {
                    for (var x = 0; x < SIZE; x++)
                    {
                        for (var y = 0; y < SIZE; y++)
                        {
                            grid[x, y] = '#';
                        }
                    }
                }

                var startX = SIZE / 2;
                var startY = SIZE / 2;
                {
                    grid[startX, startY] = START;
                    root.Visit(startX, startY, grid, (a, b) => { });
                }

                Console.WriteLine(root.ToString());
                var distances = DoBFS(startX, startY, grid);
                Console.WriteLine($"Max: {distances.Max()}");
                Console.WriteLine($"At least 1000: {distances.Count(i => i >= 1000)}");
            });
        }

        private int[] DoBFS(int startX, int startY, char[,] grid)
        {
            var seen = new Dictionary<(int, int), int>();
            var queue = new Queue<(int, int, int)>();
            var deltas = new[]
            {
                (0, -1),
                (0, 1),
                (-1, 0),
                (1, 0),
            };
            queue.Enqueue((startX, startY, 0));

            while (queue.Count > 0)
            {
                var item = queue.Dequeue();

                if (seen.ContainsKey((item.Item1, item.Item2)))
                {
                    continue;
                }
                seen.Add((item.Item1, item.Item2), item.Item3);

                foreach (var delta in deltas)
                {
                    if (grid[item.Item1 + delta.Item1, item.Item2 + delta.Item2] == DOOR)
                    {
                        var x = item.Item1 + delta.Item1 *2;
                        var y = item.Item2 + delta.Item2 * 2;
                        queue.Enqueue((x, y, item.Item3 + 1));
                    }
                }
            }

            return seen.Values.ToArray();
        }

        private static void DumpState(char[,] grid)
        {
            var minX = SIZE;
            var maxX = 0;
            var minY = SIZE;
            var maxY = 0;
            {
                for (var x = 0; x < SIZE; x++)
                {
                    for (var y = 0; y < SIZE; y++)
                    {
                        if (grid[x, y] == OPEN)
                        {
                            minX = Math.Min(minX, x);
                            maxX = Math.Max(maxX, x);
                            minY = Math.Min(minY, y);
                            maxY = Math.Max(maxY, y);
                        }
                    }
                }

                minX--;
                maxX++;
                minY--;
                maxY++;
            }

            {
                var sb = new StringBuilder();
                for (var y = minY; y <= maxY; y++)
                {
                    for (var x = minX; x <= maxX; x++)
                    {
                        sb.Append(grid[x, y]);
                    }

                    sb.AppendLine();
                }

                Console.WriteLine(sb.ToString());
            }
        }

        private const char START = 'X';
        private const char OPEN = '.';
        private const char DOOR = '-';

        private abstract class Node
        {
            public abstract void Visit(int x, int y, char[,] grid, Action<int, int> callback);

        }

        private class TextNode : Node
        {
            public string Value { get; set; }
            public override string ToString()
            {
                return Value.ToString();
            }

            public override void Visit(int x, int y, char[,] grid, Action<int, int> callback)
            {
                foreach (var ch in Value)
                {
                    switch (ch)
                    {
                        case 'N':
                            grid[x, y - 1] = DOOR;
                            y -= 2;
                            break;
                        case 'S':
                            grid[x, y + 1] = DOOR;
                            y += 2;
                            break;
                        case 'E':
                            grid[x + 1, y] = DOOR;
                            x += 2;
                            break;
                        case 'W':
                            grid[x - 1, y] = DOOR;
                            x -= 2;
                            break;
                        default:
                            throw new Exception();
                    }

                    grid[x, y] = OPEN;
                }

                //DumpState(grid);
                callback(x, y);
            }
        }

        private class OptionNode : Node
        {
            public Node[] Nodes { get; set; }
            public override string ToString()
            {
                return "(" + string.Join("|", Nodes.Select(i => i)) + ")";
            }

            public override void Visit(int x, int y, char[,] grid, Action<int, int> callback)
            {
                var seen = new HashSet<(int, int)>();
                foreach (var node in Nodes)
                {
                    node.Visit(x, y, grid, (nx, ny) =>
                    {
                        if (seen.Contains((nx, ny)))
                        {
                            return;
                        }

                        seen.Add((nx, ny));
                        callback(nx, ny);
                    });
                }
            }
        }

        private class ConcatNode : Node
        {
            public Node[] Nodes { get; set; }
            public override string ToString()
            {
                return string.Join("", Nodes.Select(i => i));
            }

            public override void Visit(int x, int y, char[,] grid, Action<int, int> callback)
            {
                var arrays = Enumerable.Range(0, Nodes.Length + 1).Select(i => Nodes.Skip(i).ToArray()).ToArray();
                void ProcessRemaining(int x1, int y1, int startAt)
                {
                    if (arrays[startAt].Length == 0)
                    {
                        callback(x1, y1);
                        return;
                    }
                    arrays[startAt][0].Visit(x1, y1, grid, (nx, ny) => ProcessRemaining(nx, ny, startAt + 1));
                }

                ProcessRemaining(x, y, 0);
            }
        } 

        Node ParseConcatNode(IEnumerator<char> e)
        {
            var nodes = new List<Node>();
            TextNode currentTextNode = null;
            while (e.MoveNext())
            {
                var ch = e.Current;
                //Console.WriteLine($"Parsing {ch}");
                switch (ch)
                {
                    case '^':
                        continue;
                    case '$':
                    case '|':
                    case ')':
                        goto done;
                    case '(':
                        currentTextNode = null;
                        nodes.Add(ParseOptionNode(e));
                        break;
                    default:
                        if (null == currentTextNode)
                        {
                            currentTextNode = new TextNode() {Value = ""};
                            nodes.Add(currentTextNode);
                        }

                        currentTextNode.Value = currentTextNode.Value + ch;
                        break;
                }
            }

            done:
            return new ConcatNode() {Nodes = nodes.ToArray()};
        }

        Node ParseOptionNode(IEnumerator<char> e)
        {
            var nodes = new List<Node>();

            do
            {
                //Console.WriteLine($"Parsing inside of option node at {e.Current}");
                nodes.Add(ParseConcatNode(e));
            } while (e.Current != ')');

            return new OptionNode() {Nodes = nodes.ToArray()};
        }

        public override void Run()
        {
            RunScenario("initial", @"^WNE$");
            RunScenario("initial", @"^ENWWW(NEEE|SSE(EE|N))$");
            RunScenario("initial", @"^ENNWSWW(NEWS|)SSSEEN(WNSE|)EE(SWEN|)NNN$");
            RunScenario("initial", @"^ESSWWN(E|NNENN(EESS(WNSE|)SSS|WWWSSSSE(SW|NNNE)))$");
            RunScenario("initial", @"^WSSEESWWWNW(S|NENNEEEENN(ESSSSW(NWSW|SSEN)|WSWWN(E|WWS(E|SS))))$");

            RunScenario("part1", @"^SESENNNW(NWNWNWWSWNWNENWWSWSSSEE(NWNSES|)SSSENNEEN(N|ES(SWSW(SESSWNWWWSESWSEEEEN(WWNSEE|)ENEN(WN(N|E)|EEEENNW(NENEENNEEESESSSSSEENNNW(SS|NEESEESWWSSSSESSESSWWSWNWSSESSSENEEEEEENESSWWWWWWSESSWNWNWWNWNENWNWSWWWSWWSESENEEE(NWWEES|)SSE(SSWSEEESWWSESWSSWNWNNWNNWSWNNWWSESWWNNNWSWWSEESWSESESSSSEENNNNEE(NWWW(SSSS|W)|ESSSE(N|SEEEESENNNNW(WSESWWW(EEENWNSESWWW|)|NEENNW(SWEN|)NN(ESESENESSEESSESSESENNNW(S|NNESENENNWSWNWSW(NNEENESENENNESSENEENNWSWNNENWNENNWNWWWWWWWSWSWS(WWN(WSW(N|WSEEEEE(WWWWWNSEEEEE|))|NE(S|ENWNEE(S|NENENWWNNEENNENNWSWNNEEEESSW(N|SEENENENNWNWNEEEESESESWSESWSWWN(WSSW(WWSSESWSSES(WWWN(WSWENE|)ENNW(S|N(ENNWSNESSW|)WW)|EEESESSSESS(WNSE|)SENEESSW(N|SSWSSEEN(EEESWWSSWNWWSWSWNWWNWW(NEN(W|ESEES(W|ENNWWNEENNES(NWSSWWEENNES|)))|SESEESESWSESWSWNWNNE(S|NWWNWSSSSSE(NNN|ESSEEN(W|EEN(NEENWWNNEEN(ESS(EEENNW(SWNSEN|)NEN(W|ENNEENWNNENWNWNNWNWWSWNWW(NW(S|NNWNNEES(SSENESEES(EEEENWNEESENNNNWWSESWWNWNENNWSWSSSESSWNWWNNNE(SS|NNENENESESSENENNNNESEESESWSESWWSSESWW(SESWSWWSWSEEEN(EEEEESWWWWSWSSWSSSSW(SSSWNNWSSWSSESEEENWWN(EEEEENNWWS(E|WNNENNESSEESEE(NWNWNNENNE(SSS(W|S)|NWWSWS(W(NNENEEE(WWWSWSNENEEE|)|WSEESS)|E))|SSSSSSSSWNNWSSWNNNNN(ESE(NNWNE|SW)|WWSSWSWSWNN(WSWSSSWNWNWNN(WSSWWSEESSWSWWSESENEEN(EN(EESWSSW(WSSEEEESWSESSWNWSSWSSSSWSSSWS(EENNEN(W|EESSEENESS(WWWWN(WSNE|)N|ENENEENNENNNE(NWWWNENNNESE(SSWNSENN|)NNWWNWWSWNNWSSSWW(NNWW(WW|NEEE(SS|NWNNW(SSWENN|)NN(EEEEE(SEESEE(NWES|)SSSSWNNNWSSWWNENWWW(SEWN|)WNN(ESE(N|EE)|W)|NN(WSWENE|)NN)|N)))|SSSESWWSEESWWSS(WWNNE(S|N(N|W))|ES(S|ENN(ENENNW(NENWWNEENESS(ENNNSSSW|)SSSESWSSW(N|WSE(S|EENNENN(SSWSSWENNENN|)))|S)|W))))|SSSSSW(SS(ENSW|)WW(NEWS|)W|N))))|WNWSWWWNNNESSENENNW(S|NNWNEENWWNWNNEENESEEEN(WNW(S|N(ENSW|)WWWS(WNNNNE(SSEWNN|)N(WWSSWNNWSWWNENN(ESNW|)WSWNN(ENNNNSSSSW|)WSWWWSWNWSWSSSWNNNWN(WWWN(E|WWWWSSEEN(ESESWSWNWWWNNN(NNE(SE|NNWS)|WSWSESSSSSWSESEENENWW(S|NNEE(NWWEES|)ES(EEENN(WSWENE|)NE(NWES|)SSE(SSESEEESSWWN(WSWNWSWNNE(N(WWSSWSESWWSSSWSESWWNWSWNNWSWWSESE(EESWSWSWWWS(EEEENESENEEENENEEEEEEEESEEENWNEESENEESESE(SSWNWNW(SWNWSWWWS(EEEEEE|WWWWWWNEEEN(ESEWNW|)WWWWSW(N|S(W(WWW|N)|E)))|N)|NNWNNWSWNWSWWNWSWWS(ESNW|)WWNENNWWS(E|WWWNNNN(WSWWSESSW(SS(EEEEEENWWWW(NNN|W)|SWNWWSES(WW|E))|N)|ESES(SWNSEN|)ENN(EESEESEENNEESENEESWSS(WWN(E|W(N|S(S|WWWSWNNWWN(SEESSEWNNWWN|))))|ENE(NNNWWNNEE(NNWWS(E|WSWNWSWSS(WNWSS(ESNW|)WNNNEENWWNEENWNEEN(WW(NEEWWS|)WWWSEESWSSWWN(ENSW|)W|ESSS(ENE(S|E)|W(N|S)))|EEENWW))|S(W|EE))|ESWSES(ESWENW|)W))|W))))|WNNNWNNWWSSWWWNNWSSSEESES(EENWN(W|E(ESSNNW|)NN)|WWNWSWWNNWSSWWNNE(NNWWWWNNEENWWWNENENWNENWWSWNWNWSWSWWWWSEEESWWWSWSESEEENN(WSWNSENE|)ENNEE(NWES|)SE(ENWESW|)SSSWSEE(N|SSWWSSENESS(EENNE(SS|N(WWSSNNEE|)E)|WWWWWNNNEE(SSWNSENN|)N(WWN(WSWSESSSWWWNEENWWNNWNN(NWSWSWWWNENNNENNEESSE(SWW(NN|SW(N|S))|NE(NWNNWWWWWNNWSWNNEENWNWWS(E|SWWSWWWSWSWSESWSEENNEN(W|NESSSENEEEN(ESSSE(SWWWSSENES(ENSW|)SWSSWSSESWWS(WNWSWWWWWWWWWWNNESEEEEENNNNWWSESSWWWNWNNNWSWNNEEENNENENWWWWNEENWNNEEEES(ENNE(S|EEENENWNNENWNNWSSWSESSSWNWSWNWSWWS(WWWSWWWSW(NNNNEENNEESWSS(SWWNEWSEEN|)EEN(E(EENWWWNEENNESSENNENWNNESESS(ENNEENNWSWWNENWWSWWWNNNWSSWSSWSSEE(SWWS(EE|WNNWSWS(E|W(SSENSWNN|)NNENNNNENEE(SWS(SW(SEWN|)N|E)|NE(NEEENEESENESSES(SEEEENNWWW(SEEWWN|)NEEEENNWNEENWNWWNWSSSE(NEWS|)SS(WNWW(WNWNWWWSWS(EEE(NWES|)E|SWWWSWWWNNEE(SWEN|)EENNWNWSS(WWNNW(SSSSSSE(SWSSSS|EE)|NNEES(W|ENNWNNEENWNWWW(SSSE(NNE|SW)|NNEEENWWWNEENNWNNEENNWNNEES(SSSEEESENNWWNEENNENWWSSWW(NENWNNWSSWWNNNWSSSSSW(NNNNNNEENNWW(SEWN|)NEENWWNENEENNWWW(NNESENEENWWWNENNWW(S(SS|E)|NNNNNNNEESWSEENNESSSEESSESSESESSSSSSSWSWWSEESESWSEENEEESWSSWWWSES(WWWNENN(EEENSWWW|)WWS(WWW(SS|NNEE(SWEN|)NWWNNESE(NNW(NEEENNE(NWNNWSSW(SS(WNNW|EN)|NNNEN(ESESSNNWNW|)WNWW(SESWENWN|)NEE(ESNW|)NNWWS(E|WNN(WSSSEWNNNE|)E))|S)|WW)|EESSWN))|SS|E)|ESSENNN(W|EESSW(N|SSESEENNW(W|S|NNESEENWNEESSSWSSSW(SESSWSWSWNNEN(NNWWWSEESWWWSWWSESSSESWWNWSSESWSESWWWSSEEN(W|ESENENNNW(SS|NEEEEEENWNEEEESSWW(NEWS|)SSENESSSSENESESWWSESSWW(SWSSSSW(SSENEESWSSWSWWSSEESES(WWWN(E|W(S(SS|W)|NNWNNE(S|NWNEESE(SWEN|)E)))|SEENESENNNWNWNNW(NEENENWNENNESEENNENWWWS(ESNW|)WNW(NENN(WSNE|)EESENENWNEEEENNEENNENNESENESEEENWNW(S|WWNNNWSSWWNNNWNEEENNNESENEESENNWWWNWWS(E|WNNEENENWWNNEENWNWWWWWNWSWWNNNEENWNWSWWNENNWNENNENNEESEEEENENWNWSWNNWSS(SEEWWN|)WWWNNENWWWSSWSEE(SWWSWWNWNWNNWNNWWNNESENESSSEENWNNESENNWNNENENWNNENEEEENWWNEEEESENEESESENENESSWSWSEEESENEESWSWSEEEENEEENWWNEEENNNWNWNNNWSSSSESS(ENSW|)WWSW(S(SWEN|)E|NWNNENWWNNWWS(WWWW(SEWN|)WWNNENENWWWNEEENENEN(WWWS(SWNWSWWNWN(EE(EE|S)|WWSESESWWWSWNNNE(SEWN|)NWWWSSSWWNNN(ESSNNW|)WSWWWN(WSSESWSWNNWWSSWNWSSSEEESSWWSWWWNWWNWNWNEESEEE(S(WW|E(SWEN|)EE)|NNNWNEEENN(WWWS(WWWWN(EEE|WSWNWWWSESWSSEEN(W|ESE(NESEEE(SENSWN|)NNWW(WWWWN|SE)|SSWNWWSESESENESESEESWWSWNNWWWSSEE(NWES|)SEESSSSWNWSWWNWW(SESS(WNSE|)EEEN(ESEESSS(SEENNEESENNWWWW(NEEENWWWNENWNW(SSSWENNN|)NENWNEESEESWWSESSENNENEESESENESSSS(SWWSWSW(NNENWWNNEE(NW(N|W)|ES(SENNSSWN|)WW)|SSWNWSW(WSEESWW(WNNWESSE|)SEEEEESWSSSEEENESESESWSWWNWN(EESNWW|)WSSSWWSWNNEENWWNW(NENNE(NWWSS|SSSE)|SSSSWSESEEN(ESEENWN(EN(N|EEEEEN(W|ESSWSSENESENNESSEENWN(NNN(WNENWWSWS(WWNNWNWNEESENN(ESES(WSWSNENE|)EEN(W|E(NEWS|)S)|WWNE(NWN(NNWSWWSWW(S(WWNEWSEE|)ESSES(WSWNSENE|)ENENWN(NES|WS)|NNE(NESENNW(ESSWNWESENNW|)|S))|E)|E))|ESS(ENSW|)W(S|N))|E)|EESSSSWSWSSENEEENW(NEESENEEE(E|SSSWNNWSSWSESWWWNEN(NEWS|)WWSSWWSSESSESSSSESWSSWWWSWWNENNENWNENESE(NNWNWSWSWNWNNWSSWNW(NNE(S|NNNEENESE(SSE(NNEENSWWSS|)SWS(W(SEWN|)NWNW(NEESNWWS|)S|EE)|NNWNNE(EN(E|WWWSSSWW(SEWN|)WWNNWWWSES(ENSW|)SWNWWNENNEENEES(E(NNNWSWNWS(NESENEWSWNWS|)|SEE(SWW|NW))|W))|S)))|SSSEESESWS(E(SWSESSSS(WNNNSSSE|)ESESSEENWNENESENNNWSWNN(EEN(WW|ESESEE(SWWSSWNNN(SSSENNSSWNNN|)|NWNWNWNEEE(NNWSWNNNW(NNEEENWNEE(N(NNEEWWSS|)WWWSSWNNW(W|SS)|SSS(ENNSSW|)WW(W|SS))|S)|S(E(EE|S(S|W))|W))))|WSSW(SEWN|)NW(NEWS|)S)|ENNNWNWW(EESESSNNWNWW|))|WWNN(ESNW|)WSWS(E|WWSSWWNNNW(NEE(NWES|)SSS|S))))|SSW(N|S(E|W))))|W))))|W)|W))|NN))|EENNEESWSEENNNENWWSWNWSW(SS|NNENESENEE(SWEN|)NENNESENNNNN(EEEEN(E(NWES|)SSE(NEWS|)SWS(E|WWNN(ESNW|)WSW(SEWN|)N)|WWW)|WSWWSWWSSSS(ENNE(N(ENESNWSW|)W|S)|WWNNNNNNNW(WSWW(SSESWSWSEENENE(SSWSESWSWWNN(ESNW|)WSWNW(WWN(EEENSWWW|)W|S)|NWN(ENSW|)W)|W(NN|WW))|NNESE(N|SSS(SSSS|EENEN(WWSNEE|)E(S|NNN))))))))|SS)|WWNENW)|WW)|NEEE(N(EESWENWW|)NWWW(SEEWWN|)NNNNE(NWNNSSES|)(SSS|E)|S)))))|EE)|EES(ENSW|)W))|EE))|E)|EESSESWWN(N|WSWSESEEES(ENN(WWW|NNNN(WSNE|)ESSENESSSWNWSSSSSENNE(SSSSS(E|W)|N(W|ENESESESS(WNSE|)EEEENWWNNENENWNEENEESSW(WSESEEENW(W|NENWNN(WWWWSWWSWNN(WSSSEESWS(SS|WNWNWNW(NN(WW|EES(W|S))|S))|EE)|ESESENEN(WW|EESWSSEEESSWSESSENENWNNESEEENNENWWNN(ESENEEEEESWWWSW(SEENESSESWWSEEESSESWWNWSWNN(WWNW(NNEE(S(W|S)|E)|SWSWW(SW(WSWSWNWNNN(ESSEWNNW|)NWWWSSENESSWWSWSSWSWSWSESWSSWSWSSESESENNNEENESESENNWNWWNEEESEENWNNNESSESSEENNW(S|NNNN(NEEESEENEEN(WWN(NEESWENWWS|)WS(S|W(WW|N))|ESEEN(W|ESESESENEEENWWNWSWN(NNESEESEEEESEEENWNNWS(WWNWSWNNNWSSWNWWNW(S|NNNNW(NEEN(EESSSEENESSEEENNWSWNNWWW(S|NEEEEEES(EEEN(WW|ESSESWWNWWWSESSSWWS(EEENNN(N|ESEEESWSSSESSEEESWSWNWSSESENEESESWW(N|WSSWNWN(NWSSSSE(N|ESEEN(W|NEEE(N(NNNWNENNWSW(SWEN|)NNEENWNNE(S|NNNNNNNWSSSWSWWSW(SESWWSEEES(SWWNEWSEEN|)ENNNW(NEE(S|N)|S)|NW(NNNESSEENNE(S|NWW(WWWSNEEE|)SS)|WW)))|WWW)|SSSSWSESWWSESSWNWWNWNWWSSWSSSENNESEN(NWNSES|)ESE(SWWWSSSWNNWSSSWNWNWSSSWNNNWSWNWNWWNNNENENEESWSEESWSW(WWNE(N|E)|SEENEES(W|E(NNNNWSW(SEWN|)NWNENWWWNWSWSWNNWSWNNNESEE(ENWWNWWWNNWSSWWNWSSESWSSSEENENW(WSNE|)NEE(NWWEES|)SSSWSWWSSENESEENWNENES(E|SSSSWSSWWWWWNEENEE(SWEN|)N(WWWSWWSWSWWNNE(NNWSWNWNNENWWWNEENESESEESE(NNWWNENWW(S|WWWNNWWN(EENWNEENNNEN(WWSSW(SEWN|)NW(NENWESWS|)S|ENEEEEESSE(SSEENEENN(WSWWSNEENE|)EENE(NWES|)EESSWW(NEWS|)SSENEENESSEESWSSWSWNWNWN(WWSS(SEE(NWNSES|)ESS(WNSE|)ES(ENN(EEESENE(NWWW(W|NNE(NNNWWNNWWNEENNNN(WSNE|)ENNESSSSSW(SEE(SSWNWS|NN)|NN)|S))|SS(ENNESENE(ENNWSNESSW|)SSWS(WNSE|)S|WWSWNNWSSSEE(WWNNNEWSSSEE|)))|W)|W)|WWNW(N(WWWWNNWSSS(EESNWW|)WSSS(SS|WWNENWWNW(NNNEESWSESENNE(NWNEN(WWSW|ES)|S)|WSSSEN(ESNW|)N))|EN(E(ENWNEWSESW|)SS|W))|S))|ENESESW(ENWNWSNESESW|))|N))|WSSWWSSWWN(ENNNESEN(SWNWSSNNESEN|)|WWNWSSESE(N|SENESSSWNWWNWNW(NNN|SWNWWSESSSSWSEENENNE(NWWSSNNEES|)SESEN(NWES|)ESSWSSWSEENEESENNWW(NEENWWNENEES(W|SESWSSESESSEENWNENE(SSENESESSWNWWSSWSSENEEN(WNSE|)EESSSEENNW(S|NENEESEEEENWWWNNWN(WWWW(W|SSE(SWEN|)EN(ESEWNW|)W|N)|EEENEN(ESSWSES(WWWNEWSEEE|)SEENNN(ESSEEEN(ESSSENENN(WSNE|)NEENEESEEE(NNWW(SEWN|)WN(WSWNSENE|)ENNESSENNNNN(SSSSSWENNNNN|)|SWWWSESSEE(NNWSNESS|)SWSWWWNNE(SEWN|)NWWNN(E(S|N)|WSSSWSWSSEEE(SWWWWNWSWWSSWSSWWNNWNWWWSS(WNWSWNNWWN(WWWNW(SWSEEESWWSWNWNNWWWSSSENE(NWES|)SESWWWWSEESEESEE(SSWWN(E|WWS(WNN(NWSSWNNNNWWSESS(S|WNWWWWWNNWNENENENESSES(WSESWWNW(NENSWS|)S|EEEENNWSWWNWNENES(S|EENWNEENENE(N(WWWNENW(N|WWSWN(N|WSWWSSEESES(ENEEN(E|WN(WSWNWW|N))|WWNWWSS(E(EE|N)|WWNWSSWNNWWSWNWSWWSEEEEE(N|SSESSWSS(WNWNNE(E|S|NWWWWWWS(WWNNE(S|ENE(NWWNENENWNENWWWWSESE(SWWNWNWSSESESWWWN(NNWNWWNENESE(S|NEE(SWEN|)NWNNWNNWWNENWWNNW(SSSESWSESSS(EEN(NNWSS|ES)|SWWSSWWW(NEENWNWSW(SSWWSNEENN|)NWNENWNWSSWNNNEN(EEESENEE(N|SSW(WW(WNWESE|)SES(ESENE(NWWEES|)S|W)|N))|N)|SEEEE(NN|EES(W|SE(N|SWS(ESESWW(S(W|EEEEE(NNWW(SEWN|)N(W|EEE(NN|E))|SWSW(NWWWEEES|)SSSWWSESWSSENESSESENNWNNWNEEE(SWSESSE(SSW(SSE(N|EESWSWNWSSWSESSSSENNESSSWWWSESESENEN(WW|ESENNEEE(SWWSSSWNWWSSE(EEE(N|SSSWSWNNN(ESNW|)WWSSE(N|SSEEENESSE(NNNWN(N|E)|SWSSWNWWWNEEN(ESNW|)WWWNNWWWWWNWWNNNESSENEEEE(SWS(WNWSNESE|)E|NNWWNWWWWWWNENNEENNWNWWSS(E(E|N)|WWWSWSWNWWSWW(SWSESESWWNWWSSSSSSW(SEENNENESSSW(N|SWSSESENN(W|NEEEESSESSSENNESESESS(WNW(N|SWWN(E|WWNNWW(SSS(ENNSSW|)SWNNWSWW(SEEWWN|)NENN(ESENSWNW|)WWWSE(E|SWWNWW(SEWN|)NEEN(EEE(NNNWSS|E)|WW))|NEE(ESSNNW|)NNWSWN)))|ENEESWSSSSESEESWSWS(WNN(E|NW(SSSWWEENNN|)W(W|NNNNESSS(NNNWSSNNESSS|)))|ESWSEE(NNNEEENNNEESSW(S(SSWNSENN|)EENNEEENNWWW(SEEWWN|)NNWSSWNNNNNENNWN(EEESSSESSESES(SSSS(WSW(NWSNES|)SSE(N|ESE(SWWNSEEN|)E)|ENEEEE(SWEN|)NE(NWWSWNN(EEENE(NNESNWSS|)S|WSW(SEWN|)NN(NWNNNN(ESE(SWSNEN|)NNWWNENNE(WSSWSEWNENNE|)|WWSESS)|E))|S))|WWNW(S|NNW(WSEWNE|)NNN))|WNWNNE(SESNWN|)NWWWWWWWN(WWSWSWW(NENENNNESES(ENNWNN(WWWS(WWNNWSSW(SSW(NWWS(E|W(NN|S))|SSESWSEENE(S|NENENWWSW(NNEEEWWWSS|)(S|W)))|NNWNEE(N|EES(ENESENNW(NEESNWWS|)W|S)))|EE)|E(EEESE(N|EE)|S))|W)|SEEENE(SSWWW(W|SEESENESS(SEEESEENWNEEE(NWNWWS(WSWNNENWNN(ESEE(SW|NW)|WSW(SESSSNNNWN|)N)|E)|E|SWSESWWWWSSS(WNNSSE|)ENNEESS(ENNSSW|)W(S(ESSWNSENNW|)WW|N))|W))|N))|EE))|N)|SS)))))|WNN(WSNE|)E(S|N(W|NNN)))|NENEEEENEENE(S|NNWSWSWWWWWS(EEE|W(SW(WWWNSEEE|)N|NNEEENEE(SWEN|)N(WW|E(NEENWN(WSWSNENE|)EESSS(WW|SENNNNESESWSSEE(N(NENNNNWW(SES(W|S)|NWNWWWNENNW(S|W(WWSSNNEE|)NEEN(N|WW)))|W)|SESSSW(NNWNWWW(EEESESNWNWWW|)|SSS(WNWSNESE|)E)))|S)))))))))))|N)|EEEN(WNENWNWNEESEENWNWNEEES(SEENENNE(EEE(NWWNNN(ESSEWNNW|)WSSWNNNWNNWWSW(NNEENNESSE(N|SS)|SSEE(SE(SS(SW(WWWNENE(SENSWN|)NWWSWNN(E|WSW(N|WSSENESS(ENSW|)WSS(ENSW|)WWNWSSWNWW(NENNEEE(N|S(WWS|ES))|WSW(SEEE(NWES|)ESWWSES(WSEWNE|)EEENESENNWNW(NEWS|)SW(SWEN|)N|N))))|S(S|E))|EE)|N)|N(W|N)))|E)|SS)|W)|ESES(ESENN(E(NWES|)S(E|SSSESS)|W)|WW)))))|N)|NE(NNW(NEWS|)S|EE))|NWWNEN(W|NE(NEWS|)SS))))|N)|WW))))))|NWNEEENWWNEEEESWSSSS(WNNWESSE|)EENNN(WSSNNE|)NESENNWNW(WWNNESEENN(EESSENESENNWWNEEEENWNEEENESESE(NNNE(S|ENENWNWSWWS(EE|WWS(EESNWW|)WSWNNNN(ES(S|EEN(ENNN(NWSWENES|)ESS(ENNESSENNE(SSSWENNN|)NENN(WSNE|)E(N|SEE(SWWEEN|)E)|S)|W))|W)))|SSWWS(SWWNWN(WSSSE(N|EESE(N|SSSWSWWSSSWNNNNEENWNN(ESESNWNW|)WSSWSSSSSSWSWWWNWS(SSENEESWSWSEENENNENEESWSEESSSESEENWNENWNW(NENWW(N(WW|EEE(SSEEESENE(ENW(N|W)|SSWSWSESS(WWW(S(EEESNWWW|)WNWSWNWSWSW(W|NNEN(NNNWS(W(W|NN)|SS)|E))|NNE(SEWN|)NN(NW(W|SS)|E))|ENNNEE))|NNE(S|NWN(NN(E|N)|WSSWNWSSEE(WWNNESNWSSEE|)))))|S)|SS)|WNNN(WSNE|)EENNN(WSSNNE|)ESESE(SSWNW(S(SEWN|)WW|N)|NNWNWNEE(S|ENWN(E|WSWNWNN(SSESENSWNWNN|)))))))|EE(NN(ESE|WS)|S))|E))|W(WWWSWSWS(EENSWW|)WWSWS(SENENSWSWN|)WWNENNE(EENENENNN(ESESWENWNW|)WWNWWSESEESWWWWN(NNWNW(SWSEESWSWWN(NNWN(WS(SESSW(WS(SSENESESEE(S(SSSWENNN|)WWWWW(NEEWWS|)WSS(ENSW|)SS(WNWNEWSESE|)S|ENWNEN(ESENE(S|E)|WWS(WNWWEESE|)S|N))|W)|N)|W)|EE)|E)|N(N|EEE(S(W|E(E|N))|N)))|E)|S)|S))|S)))|E)|N)|SEEEEE))|EEEESSWN(SENNWWEESSWN|)))|ES(SE(S|NE(SENSWN|)NWN(W|E|NNNN(E(S|NE(E|S))|W)))|W)))))))|E)|SSWS(EEE|W)))))|EE)|ESEEEESWWWWSWWSSENESESWWSE(SS|EEN(NNWNEWSESS|)E)))|NNW(NEEEN(EEE(NWWNSEES|)SSWNWSWS(WNSE|)EEEES(E|S)|W)|S|WW))|NEE(S|N))|EEESENEENWWWNN(EES(W|EEEENN(WSWWEENE|)ESENNEESE(N|SESWWW(S(E|WSWS(WNWN(EENE|WS)|SS|E))|N(N|E))))|W(SS|N)))|ENESES(SEEESWSEESWSWSES(SWWSE(SSW(SEWN|)NWNNN(WWWSESS(ENNSSW|)WWN(E|W(SS(SEENWESWWN|)W|N(W|E)))|NE(SEWN|)NN(E|NN))|E)|ENNE(ENENNNWWS(WNNNESEENNESSENESSWSW(SE(ENEEEENNESSSSS(WNWWN(EE|W)|E(SWSESWSSSE(SSSWS(E|WNN(WSSWENNE|)N(ES|NNW))|NN)|NNNNNNWWNWWN(NNESSENNEE(N|SSW(SEWN|)N)|WWS(WNWWWWSES(NWNEEEWWWSES|)|ESSEE(SWW|NW)))))|SWS(ES(S|W)|W))|N)|S(ENSW|)S)|S))|W))|NN(WSWENE|)N)))|N)|W(SS|N))|W)))|NWN(E|NWNNWW(N(WNWW(SEWN|)NENNESSE(S|NE(NNWSNESS|)E)|EE)|SESSESW(SEWN|)W))))|W))))))|ESSWS(W(NN(WW(NEWS|)W|E)|S)|E))|S)|E))|S)|S)))|N))))|E)))|W(S|NN(EENSWW|)WSW(SEWN|)NWWWN(WNN(N|WSSSESE(WNWNNNSSSESE|))|EE))))|WW))|WW)|S(WNSE|)SS))|S)|W)))|WS(WNWSWSWSWS(EENSWW|)WNN(EN(ENEN(W(WS|NE)|E)|W)|WSSSWSS(ENSW|)WS(S|W))|SS)))|N)|NEN(E|W)))|EE)|N)|WSWWWS(W(NNEEEWWWSS|)W|ESENESSEN(SWNNWSNESSEN|))))))|N))))|WWSWWW(NE(E|N)|W))))|SSE(SE(SWW(W|N)|N)|NN)))|NN)))|SWW(NEWS|)SEESWWW(SEESSNNWWN|)NN)|SWS(WW|ES(ES(WSNE|)E|W))))|N)|N(NNW(S|NWW(SEWN|)NEN(ESNW|)WNWWSWNN(WSSSEEE(N|SWWWWSS(SEE(NWNE|SW)|WNWWWWWS(E(SWSSNNEN|)EEE|WNWNENWN(W|EE(SS|NEENWNWSW(S|NNW(S|WWW|NENWNNW(S|NEN(ESSSENN(N|ESEE(SS(ENSW|)WW(NEWS|)WSSEE(NWES|)S|N(NNESENNWNW(S|NE(NN|EES(E|SS|W)))|W)))|WW)))))))))|EEE))|E))))|E)|NNN))))))|S(EE|S))|SS(SSSSEWNNNN|)E(N|E))|SS)|W))|SS))|E))|S(E|S))|E)|WWNWW(S(W(SEWN|)N|E)|N))|S))))|EENWW(W|N(N|EE)))|SSS(W(NN|W)|E))|S)|W)|SESENNES(ENSW|)SSSWWW(N(EE|N)|SEES(WWSESWSSESSSS(WNNNSSSE|)ENE(NNENWW(SS|N(NN|W))|S)|EEN(W|NE(SS|E)))))|EE))|WSW(NWES|)SEE(N|SSSWSWSES(EENN(WSNE|)NEESSSSEEESE(NENWWWWNNEENE(SSWWEENN|)N(NEESWENWWS|)WWSWNN|SSWNWNWSS(SWWNENNW(NNNN|S)|E))|WSW(SESEWNWN|)N)))|EEENNN(N(N|ESSESWSEEENWNNEE(N(WWWSNEEE|)N|S(W|SE(SWEN|)NN)))|W))|NE(S|N(EEE|W)))|WWN(ENW|WS))))|S))|ESE(SS|E))|EENN(WSNE|)N(ESNW|)N)|EE)))|S)))|N)|N)|E)|E)|NN)|WW)))|W))|EENNNNN(WSSSSNNNNE|)NNESSESSW(SSENESEENWNWN(NNWESS|)E|N))|EN(W|E(E|S)))|EE))|ES(ENSW|)SSWNWWWS(WNWESE|)EESSSS(ENNNSSSW|)W(WNENNSSWSE|)SESSWN)))|N)|NW(N|S))|W)|EE(ENSW|)S(W|S))|E))))|W)|NN(W|NNNN(ESNW|)W(WNNWESSE|)S))|W)|NNN(NENWNE|W)))|WWW)|W))|SES(W|EESESE(NNWNSESS|)ESWSS(ENSW|)WNW(SWNSEN|)N(E|N))))|WW)|W|N)|W)))))|W)))|N)|NNN(NW|ESSS))))))|EEESEEEESE(SWWNWSWW(NEWS|)SWSE(SWWNWWSS(W(W|NNNEEE)|E(ESWSEWNENW|)N)|EEENWW)|NNWNE(NWWWSW(NWSW|SEEN)|E)))|SS))|NWNWSSE(WNNESEWNWSSE|)))))|N))|S))|N)|E)|WW)|S)$");
        }
    }
}
